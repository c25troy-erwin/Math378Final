[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\nlibrary(palmerpenguins)\nlibrary(dplyr)\nlibrary(dbplyr)\nlibrary(ggplot2)\nlibrary(DBI)\nlibrary(duckdb)\n\ncon &lt;- DBI::dbConnect(duckdb::duckdb(), dbdir = \"my-db.duckdb\")\ndf &lt;- palmerpenguins::penguins\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n        ends_with(\"mm\") | ends_with(\"g\"),\n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  dplyr::collect() %&gt;%\n  knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500"
  },
  {
    "objectID": "index.html#penguin-size-and-mass-by-sex-and-species",
    "href": "index.html#penguin-size-and-mass-by-sex-and-species",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\nlibrary(palmerpenguins)\nlibrary(dplyr)\nlibrary(dbplyr)\nlibrary(ggplot2)\nlibrary(DBI)\nlibrary(duckdb)\n\ncon &lt;- DBI::dbConnect(duckdb::duckdb(), dbdir = \"my-db.duckdb\")\ndf &lt;- palmerpenguins::penguins\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n        ends_with(\"mm\") | ends_with(\"g\"),\n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  dplyr::collect() %&gt;%\n  knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500"
  },
  {
    "objectID": "index.html#penguin-size-vs-mass-by-species",
    "href": "index.html#penguin-size-vs-mass-by-species",
    "title": "Penguins EDA",
    "section": "Penguin Size vs Mass by Species",
    "text": "Penguin Size vs Mass by Species\n\n\nCode\ndf %&gt;%\n  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + \n  geom_smooth(method = \"lm\")\n\n\n\n\n\n\n\n\n\n\n\nCode\nDBI::dbDisconnect(con, shutdown = TRUE)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "chapter1.2.html",
    "href": "chapter1.2.html",
    "title": "Model",
    "section": "",
    "text": "Code\nfrom palmerpenguins import penguins\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing"
  },
  {
    "objectID": "chapter1.2.html#get-data",
    "href": "chapter1.2.html#get-data",
    "title": "Model",
    "section": "Get Data",
    "text": "Get Data\n\nCode\ndf = penguins.load_penguins().dropna()\n\ndf.head(3)"
  },
  {
    "objectID": "chapter1.2.html#define-model-and-fit",
    "href": "chapter1.2.html#define-model-and-fit",
    "title": "Model",
    "section": "Define Model and Fit",
    "text": "Define Model and Fit\n\nCode\nX = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\ny = df['body_mass_g']\n\nmodel = LinearRegression().fit(X, y)"
  },
  {
    "objectID": "chapter1.2.html#get-some-information",
    "href": "chapter1.2.html#get-some-information",
    "title": "Model",
    "section": "Get some information",
    "text": "Get some information\n\nCode\nprint(f\"R^2 {model.score(X,y)}\")\nprint(f\"Intercept {model.intercept_}\")\nprint(f\"Columns {X.columns}\")\nprint(f\"Coefficients {model.coef_}\")"
  },
  {
    "objectID": "chapter1.2 - Copy.html",
    "href": "chapter1.2 - Copy.html",
    "title": "Home",
    "section": "",
    "text": "This is the final project for Math 378, where we will be working through the labs from Chapters 1-6 of DevOps for Data Science by Alex Gold."
  },
  {
    "objectID": "chapter1.2 - Copy.html#troy-erwins-math-378-final-project",
    "href": "chapter1.2 - Copy.html#troy-erwins-math-378-final-project",
    "title": "Home",
    "section": "",
    "text": "This is the final project for Math 378, where we will be working through the labs from Chapters 1-6 of DevOps for Data Science by Alex Gold."
  },
  {
    "objectID": "home.html",
    "href": "home.html",
    "title": "Home",
    "section": "",
    "text": "This is the final project for Math 378, where we will be working through the labs from Chapters 1-6 of DevOps for Data Science by Alex Gold."
  },
  {
    "objectID": "home.html#troy-erwins-math-378-final-project",
    "href": "home.html#troy-erwins-math-378-final-project",
    "title": "Home",
    "section": "",
    "text": "This is the final project for Math 378, where we will be working through the labs from Chapters 1-6 of DevOps for Data Science by Alex Gold."
  },
  {
    "objectID": "model.html",
    "href": "model.html",
    "title": "Model",
    "section": "",
    "text": "library(reticulate)"
  },
  {
    "objectID": "model.html#get-data",
    "href": "model.html#get-data",
    "title": "Model",
    "section": "Get Data",
    "text": "Get Data\nimport duckdb from palmerpenguins \nimport penguins  \n\ncon = duckdb.connect('my-db.duckdb') \ndf = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()  df.head(3)"
  },
  {
    "objectID": "model.html#define-model-and-fit",
    "href": "model.html#define-model-and-fit",
    "title": "Model",
    "section": "Define Model and Fit",
    "text": "Define Model and Fit\nX = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True) \ny = df['body_mass_g']  \n\nmodel = LinearRegression().fit(X, y)"
  },
  {
    "objectID": "model.html#get-some-information",
    "href": "model.html#get-some-information",
    "title": "Model",
    "section": "Get some information",
    "text": "Get some information\nprint(f\"R^2 {model.score(X,y)}\")\nprint(f\"Intercept {model.intercept_}\")\nprint(f\"Columns {X.columns}\")\nprint(f\"Coefficients {model.coef_}\")\nfrom vetiver import VetiverModel \n\nv = VetiverModel(model, model_name = 'penguin_model', prototype_data = X)\nfrom pins import board_folder \nfrom vetiver import vetiver_pin_write \n\nb = board_folder('data/model', allow_pickle_read = True) \nvetiver_pin_write(b, v)\nModel Cards provide a framework for transparent, responsible reporting.   Use the vetiver `.qmd` Quarto template as a place to start,   with vetiver.model_card() Writing pin: Name: 'penguin_model' Version: 20240222T041503Z-9ea85\nfrom vetiver import VetiverAPI \n\napp = VetiverAPI(v, check_prototype = True)\n#from vetiver import prepare_docker \n#prepare_docker(b, 'penguin_model')\n#import requests  \n\n#req_data = {  \n  # \"bill_length_mm\": 0, \n  #  \"species_Chinstrap\": False,  \n  # \"species_Gentoo\": False, \n  #  \"sex_male\": False \n#} \n#req = requests.post('http://127.0.0.1:8080/predict', json = [req_data]) \n#res = req.json().get('predict')[0] \n#print(res)\n#library(httr2) \n#req &lt;- httr2::request(\"http://127.0.0.1:8080/predict\") |&gt;  \n# httr2::req_body_json(   \n#  list(    \n#   list(     \n#    \"bill_length_mm\" = 0,      \n#   \"species_Chinstrap\" = FALSE,       \n#  \"species_Gentoo\" = FALSE,        \n# \"sex_male\" = FALSE       \n#)     \n#)   \n#) |&gt;   \n#httr2::req_perform() \n#res &lt;- httr2::resp_body_json(req)$predict[[1]] \n#res\nCode\ncon.close()"
  }
]